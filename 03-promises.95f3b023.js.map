{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACaC,KAAKC,SAAW,GAEpCJ,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IAIP,IAAMO,EAAOC,SAASC,cAAc,SAEpCF,EAAKG,iBAAiB,UAAU,SAAUC,GACxCA,EAAMC,iBAMN,IAJA,IAAMC,EAAaC,SAASP,EAAKQ,SAAgB,MAAEC,OAC7CC,EAAYH,SAASP,EAAKQ,SAAe,KAAEC,OAC3CE,EAASJ,SAASP,EAAKQ,SAAiB,OAAEC,OAEvCG,EAAI,EAAGA,EAAID,EAAQC,IAAK,CAG/BrB,EAAcqB,EAAI,EAFGN,EAAaM,EAAIF,GAGnCG,MAAK,SAAAC,G,IAAGtB,EAAQsB,EAARtB,SAAUC,EAAKqB,EAALrB,MACjBsB,EAAA1B,GAAS2B,OAAOC,QACd,uBAAwCC,OAAf1B,EAAS,QAAY0B,OAANzB,EAAM,M,IAGjD0B,OAAM,SAAAL,G,IAAGtB,EAAQsB,EAARtB,SAAUC,EAAKqB,EAALrB,MAClBsB,EAAA1B,GAAS2B,OAAOI,QACd,sBAAuCF,OAAf1B,EAAS,QAAY0B,OAANzB,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nconst form = document.querySelector('.form');\n\nform.addEventListener('submit', function (event) {\n  event.preventDefault();\n\n  const firstDelay = parseInt(form.elements['delay'].value);\n  const delayStep = parseInt(form.elements['step'].value);\n  const amount = parseInt(form.elements['amount'].value);\n\n  for (let i = 0; i < amount; i++) {\n    const currentDelay = firstDelay + i * delayStep;\n\n    createPromise(i + 1, currentDelay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n  }\n});\n\n// import Notiflix from 'notiflix';\n\n// function createPromise(delay) {\n//   return new Promise((resolve, reject) => {\n//     setTimeout(() => {\n//       const shouldResolve = Math.random() > 0.3;\n//       if (shouldResolve) {\n//         resolve({ position, delay });\n//       } else {\n//         reject({ position, delay });\n//       }\n//     }, delay);\n//   });\n// }\n\n// const form = document.querySelector('.form');\n\n// form.addEventListener('submit', function (event) {\n//   event.preventDefault();\n\n//   const firstDelay = parseInt(form.elements['delay'].value);\n//   const delayStep = parseInt(form.elements['step'].value);\n//   const amount = parseInt(form.elements['amount'].value);\n\n//   for (let i = 0; i < amount; i++) {\n//     const currentDelay = firstDelay + i * delayStep;\n\n//     createPromise(i + 1, currentDelay)\n//       .then(({ position, delay }) => {\n//         Notiflix.Notify.Success(\n//           `✅ Fulfilled promise ${position} in ${delay}ms`\n//         );\n//       })\n//       .catch(({ position, delay }) => {\n//         Notiflix.Notify.Failure(\n//           `❌ Rejected promise ${position} in ${delay}ms`\n//         );\n//       });\n//   }\n// });\n"],"names":["$ejkSG","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","$ce04d3a99e08e73b$var$form","document","querySelector","addEventListener","event","preventDefault","firstDelay","parseInt","elements","value","delayStep","amount","i","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.95f3b023.js.map"}